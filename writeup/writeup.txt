Documentation and Writeup for Dynamic Memory Allocator
------------------------------------------------------

Team members:
1) Samarth Parikh - 201401244
2) Saurabh Shah – 201401245

In this project we have created a dynamic storage allocator for C programs making our own versions of malloc, free and realloc. For this purpose, we have used the approach “Segregated explicit free list” that contains 10 different categories of block sizes varying from 'less than 2^6' to 'greater than 2^14'  in the intervals of the powers of 2.

Why Segregated Free List?
-------------------------

Segregated free list uses different linked lists for different sized blocks. Each of these linked list can be seen as an array of explicit free list. We are using this approach because it outputs performance better than explicit free lists and currently adopted implicit free lists.It performs adding and freeing operations in constant time. In addition to that, segregated best fit approach is faster than the regular/unsegregated best fit since it always searches in a free list for an appropriate index (index signifies our individual linked list for appropriate size). If it fails to fit in this index then it searches for larger indices. It also controls fragmentation of segregated storage by everytime splicing and coalescing the blocks after searching and allocating the block.  



The block structure that we have used for the implementation of segregated free list is sketched below: 

----+---+----+-----+-----+-----+----+-----+-------+-------+------+----+
|         | Next       |   Prev      |                   |            |              
| Header  | Block      |   Block     | …………………………………………. |   Footer   |
|         | Pointer    |   Pointer   |                   |            |
-----+-----+------+------+------+------+-----+-------+-------+-------+-

Hence the block pointer 'bp' points to the location of the Next Block Pointer following the header.


The things which we have added or updated is described as follows :
-----------------------------------------------------------------

→ Defining additional macros for segregated free list which are basically getter and setter methods for getting and setting next and previous block pointers in accordance with our block structure.

→  Defined additional functions to perform operations on free list, i.e. adding a free block to the free list, removing a newly allocated block from the free list, coalescing between the blocks, etc. In the new created coalescing routine(main_coalesce), we have considered all the four cases in which our block can be coalesced. Then by calling the regular coalescing routine, we are adding the new coalesced block to the free list and removing the block from the free list, on which coalescing was being performed. Hence add and remove functions will be used.  
           
          
→ Changed a routine of 'find_fit' for segregated free list, in which we are using the best fit method to find a fit for a block of required size. Initially we will fetch the list index from where the appropriate size of block could be achieved and if it fails to find any free block in that particular linked list of the list index (i.e. if free list is empty for that particular list index), it will search for the best fit in the linked list of next list index and so on.	   

→ Updated the malloc and free routines that can call the segregated free list routines which we have made initially. Now it calls our find_fit and for allocating the blocks it calls an updated 'place' routine (which is now able to handle splicing of under-allocated blocks and placing the smaller splice into an appropriate free list). Finally it calls 'extend_heap' routine if it fails to allocate a block of the required size. In the 'free' routine there is no change from what was given earlier apart from calling our new 'main_coalesce' routine instead of regular coalesce. Updating malloc and free turned out to be a boost in the performance up to 38%.   
         
→ Finally we updated the realloc routine boosting up the performance up to 95%. We have added a few new things in addition to our current implementation. Realloc checks if we can coalesce on the right and creates a resultant block with appropriate size. This greatly increases our performance. Also if old ptr is NULL, then it just calls malloc, as it was doing previously. And if size is zero then it calls free, and returns NULL.

→ Made an updated version of heap consistency checker which can now check for the following:
           1. Checks Prologue header
           2. Checks if the block is double word aligned or not.
           3. Checks if header matches footer or not.
	   4. Checks if contiguous free blocks somehow escaped coalescing.
	   5. Checks if free block is actually in free list. The number of free blocks in heap and segregated list match.
	   6. Checks if pointers in free list points to valid free blocks.
	   7. Checks epilogue header.
         
We have added comments in appropriate places for the understanding of the code.








 




